# -*- coding: utf-8 -*-
from odoo import models, fields, api
from odoo.exceptions import UserError
from datetime import datetime

class PayrollPayslip(models.Model):
    _name = 'payroll.payslip'
    _description = 'Phi·∫øu l∆∞∆°ng'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _order = 'date_from desc, id desc'

    name = fields.Char('Tham chi·∫øu', required=True, copy=False, readonly=True, 
                       states={'draft': [('readonly', False)]}, default='New')
    
    employee_id = fields.Many2one('employee.management.employee', 'Nh√¢n vi√™n', 
                                   required=True, readonly=True,
                                   states={'draft': [('readonly', False)]})
    
    contract_id = fields.Many2one('employee.management.contract', 'H·ª£p ƒë·ªìng',
                                   readonly=True, states={'draft': [('readonly', False)]})
    
    structure_id = fields.Many2one('payroll.structure', 'C·∫•u tr√∫c l∆∞∆°ng',
                                    required=True, readonly=True,
                                    states={'draft': [('readonly', False)]})
    
    date_from = fields.Date('T·ª´ ng√†y', required=True, readonly=True,
                             states={'draft': [('readonly', False)]})
    date_to = fields.Date('ƒê·∫øn ng√†y', required=True, readonly=True,
                           states={'draft': [('readonly', False)]})
    
    date_payment = fields.Date('Ng√†y thanh to√°n', readonly=True,
                                states={'draft': [('readonly', False)]})
    
    state = fields.Selection([
        ('draft', 'Nh√°p'),
        ('verify', 'Ch·ªù x√°c nh·∫≠n'),
        ('done', 'Ho√†n th√†nh'),
        ('cancel', 'H·ªßy')
    ], string='Tr·∫°ng th√°i', default='draft', tracking=True)
    
    line_ids = fields.One2many(
        'payroll.payslip.line', 'payslip_id', 'Chi ti·∫øt l∆∞∆°ng',
        copy=True, readonly=True, states={'draft': [('readonly', False)]}
    )
    
    # C√°c tr∆∞·ªùng t·ªïng h·ª£p
    basic_wage = fields.Monetary('L∆∞∆°ng c∆° b·∫£n', compute='_compute_totals', store=True, currency_field='currency_id')
    total_allowance = fields.Monetary('T·ªïng ph·ª• c·∫•p', compute='_compute_totals', store=True, currency_field='currency_id')
    gross_wage = fields.Monetary('T·ªïng thu nh·∫≠p', compute='_compute_totals', store=True, currency_field='currency_id')
    total_deduction = fields.Monetary('T·ªïng kh·∫•u tr·ª´', compute='_compute_totals', store=True, currency_field='currency_id')
    net_wage = fields.Monetary('Th·ª±c nh·∫≠n', compute='_compute_totals', store=True, currency_field='currency_id')
    
    bhxh_amount = fields.Monetary('BHXH (8%)', compute='_compute_totals', store=True, currency_field='currency_id')
    bhyt_amount = fields.Monetary('BHYT (1.5%)', compute='_compute_totals', store=True, currency_field='currency_id')
    bhtn_amount = fields.Monetary('BHTN (1%)', compute='_compute_totals', store=True, currency_field='currency_id')
    total_insurance = fields.Monetary('T·ªïng b·∫£o hi·ªÉm', compute='_compute_totals', store=True, currency_field='currency_id')
    personal_income_tax = fields.Monetary('Thu·∫ø TNCN', compute='_compute_totals', store=True, currency_field='currency_id')
    
    currency_id = fields.Many2one('res.currency', 'Ti·ªÅn t·ªá', 
                                   default=lambda self: self.env.company.currency_id)
    
    company_id = fields.Many2one('res.company', 'C√¥ng ty', 
                                  default=lambda self: self.env.company)
    
    note = fields.Text('Ghi ch√∫')
    
    @api.model
    def create(self, vals):
        if vals.get('name', 'New') == 'New':
            vals['name'] = self.env['ir.sequence'].next_by_code('payroll.payslip') or 'New'
        return super().create(vals)
    
    @api.onchange('employee_id', 'date_from', 'date_to')
    def _onchange_employee(self):
        """T·ª± ƒë·ªông l·∫•y contract khi ch·ªçn nh√¢n vi√™n"""
        if self.employee_id:
            # T√¨m h·ª£p ƒë·ªìng ƒëang ho·∫°t ƒë·ªông c·ªßa nh√¢n vi√™n
            contract = self.env['employee.management.contract'].search([
                ('employee_id', '=', self.employee_id.id),
                ('state', '=', 'open'),
                ('date_start', '<=', self.date_to or fields.Date.today()),
                '|', ('date_end', '=', False), ('date_end', '>=', self.date_from or fields.Date.today())
            ], limit=1, order='date_start desc')
            
            # T·ª± ƒë·ªông g√°n contract n·∫øu t√¨m ƒë∆∞·ª£c
            if contract:
                self.contract_id = contract
            
            # N·∫øu ch∆∞a ch·ªçn c·∫•u tr√∫c l∆∞∆°ng, t·ª± ƒë·ªông ch·ªçn c·∫•u tr√∫c VN
            if not self.structure_id:
                structure = self.env['payroll.structure'].search([('code', '=', 'VN_SALARY')], limit=1)
                if structure:
                    self.structure_id = structure
    
    def action_compute_sheet(self):
        """T√≠nh to√°n phi·∫øu l∆∞∆°ng - ch·ªâ t·ª´ rule is_active=True"""
        for payslip in self:
            if not payslip.contract_id:
                raise UserError('Nh√¢n vi√™n kh√¥ng c√≥ h·ª£p ƒë·ªìng ƒëang ho·∫°t ƒë·ªông!')
            
            if not payslip.structure_id:
                raise UserError('Vui l√≤ng ch·ªçn c·∫•u tr√∫c l∆∞∆°ng!')
            
            payslip.line_ids.unlink()
            
            rules = {}
            lines_to_create = []
            
            for rule in payslip.structure_id.rule_ids.filtered(lambda r: r.is_active).sorted('sequence'):
                amount = rule.compute_rule(
                    contract=payslip.contract_id,
                    employee=payslip.employee_id,
                    payslip=payslip,
                    rules=rules
                )
                
                rules[rule.code] = amount
                
                lines_to_create.append({
                    'payslip_id': payslip.id,
                    'rule_id': rule.id,
                    'name': rule.name,
                    'code': rule.code,
                    'category': rule.category,
                    'sequence': rule.sequence,
                    'amount': amount,
                    'appears_on_payslip': rule.appears_on_payslip,
                })
            
            self.env['payroll.payslip.line'].create(lines_to_create)
            payslip.message_post(body='‚úÖ ƒê√£ t√≠nh to√°n l·∫°i phi·∫øu l∆∞∆°ng')
    
    @api.depends('line_ids.amount')
    def _compute_totals(self):
        for payslip in self:
            payslip.basic_wage = sum(payslip.line_ids.filtered(lambda l: l.category == 'basic').mapped('amount'))
            payslip.total_allowance = sum(payslip.line_ids.filtered(lambda l: l.category == 'allowance').mapped('amount'))
            payslip.gross_wage = sum(payslip.line_ids.filtered(lambda l: l.category == 'gross').mapped('amount'))
            payslip.total_deduction = abs(sum(payslip.line_ids.filtered(lambda l: l.category == 'deduction').mapped('amount')))
            payslip.net_wage = sum(payslip.line_ids.filtered(lambda l: l.category == 'net').mapped('amount'))
            
            payslip.bhxh_amount = abs(sum(payslip.line_ids.filtered(lambda l: l.code == 'BHXH').mapped('amount')))
            payslip.bhyt_amount = abs(sum(payslip.line_ids.filtered(lambda l: l.code == 'BHYT').mapped('amount')))
            payslip.bhtn_amount = abs(sum(payslip.line_ids.filtered(lambda l: l.code == 'BHTN').mapped('amount')))
            payslip.total_insurance = payslip.bhxh_amount + payslip.bhyt_amount + payslip.bhtn_amount
            
            payslip.personal_income_tax = abs(sum(payslip.line_ids.filtered(lambda l: l.code == 'PIT').mapped('amount')))
    
    def action_payslip_verify(self):
        self.write({'state': 'verify'})
        for payslip in self:
            payslip.message_post(body='üìã Phi·∫øu l∆∞∆°ng ƒë√£ g·ª≠i x√°c nh·∫≠n')
    
    def action_payslip_done(self):
        self.write({'state': 'done', 'date_payment': fields.Date.today()})
        for payslip in self:
            # C·∫≠p nh·∫≠t l∆∞∆°ng hi·ªán t·∫°i cho nh√¢n vi√™n
            payslip.employee_id._compute_current_salary()
            
            payslip.employee_id.message_post(
                body=f"‚úÖ Phi·∫øu l∆∞∆°ng {payslip.name} ƒë√£ x√°c nh·∫≠n<br/>"
                     f"K·ª≥: {payslip.date_from:%d/%m/%Y} - {payslip.date_to:%d/%m/%Y}<br/>"
                     f"Th·ª±c nh·∫≠n: {payslip.net_wage:,.0f} VNƒê"
            )
            payslip.message_post(body='‚úÖ Phi·∫øu l∆∞∆°ng ƒë√£ ho√†n th√†nh')
    
    def action_payslip_draft(self):
        self.write({'state': 'draft'})
    
    def action_payslip_cancel(self):
        self.write({'state': 'cancel'})