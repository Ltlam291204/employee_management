# -*- coding: utf-8 -*-
from odoo import models, fields, api
from odoo.exceptions import ValidationError, UserError
import random
import string

class Employee(models.Model):
    _name = 'employee.management.employee'
    _description = 'H·ªì s∆° Nh√¢n vi√™n'
    _inherit = ['mail.thread', 'mail.activity.mixin']
    _rec_name = 'display_name_char'

    # Tr∆∞·ªùng t√†i kho·∫£n Odoo
    name = fields.Many2one('res.users', 
                            string='T√†i kho·∫£n Odoo', 
                            ondelete='restrict', 
                            tracking=True,
                            readonly=True,
                            help="T√†i kho·∫£n Odoo ƒë∆∞·ª£c t·∫°o t·ª± ƒë·ªông t·ª´ email.")
    
    # Checkbox ƒë·ªÉ quy·∫øt ƒë·ªãnh c√≥ t·∫°o t√†i kho·∫£n Odoo hay kh√¥ng
    create_odoo_account = fields.Boolean(
        'T·∫°o t√†i kho·∫£n Odoo',
        default=False,
        tracking=True,
        help="T√≠ch v√†o √¥ n√†y n·∫øu mu·ªën t·∫°o t√†i kho·∫£n Odoo cho nh√¢n vi√™n n√†y"
    )
    
    # L∆∞u m·∫≠t kh·∫©u hi·ªán t·∫°i
    current_password = fields.Char(
        'M·∫≠t kh·∫©u hi·ªán t·∫°i',
        readonly=True,
        groups='employee_management.group_manager',
        help="M·∫≠t kh·∫©u hi·ªán t·∫°i c·ªßa t√†i kho·∫£n. Ch·ªâ Gi√°m ƒë·ªëc xem ƒë∆∞·ª£c."
    )
    
    # T√™n nh√¢n vi√™n
    display_name_char = fields.Char('T√™n Nh√¢n vi√™n', required=True, tracking=True) 
    email = fields.Char('Email', tracking=True)
    phone = fields.Char('S·ªë ƒëi·ªán tho·∫°i', tracking=True)
    department = fields.Char('Ph√≤ng ban', tracking=True)
    position = fields.Char('Ch·ª©c danh', tracking=True)
    
    # Tr∆∞·ªùng ch·ªçn quy·ªÅn
    user_role = fields.Selection([
        ('employee', 'Nh√¢n vi√™n'),
        ('officer', 'C√°n b·ªô'),
        ('manager', 'Gi√°m ƒë·ªëc')
    ], string='Quy·ªÅn h·∫°n', default='employee', required=True, tracking=True,
       help="Ch·ªçn quy·ªÅn cho t√†i kho·∫£n Odoo c·ªßa nh√¢n vi√™n n√†y")

    # Th√¥ng tin b·ªï sung
    date_of_birth = fields.Date('Ng√†y sinh')
    identification_number = fields.Char('S·ªë CMND/CCCD')
    address = fields.Text('ƒê·ªãa ch·ªâ')
    emergency_contact = fields.Char('T√™n ng∆∞·ªùi li√™n h·ªá kh·∫©n c·∫•p')
    emergency_phone = fields.Char('SƒêT kh·∫©n c·∫•p')
    
    # Tr·∫°ng th√°i
    state = fields.Selection([
        ('draft', 'Nh√°p'),
        ('active', 'ƒêang l√†m vi·ªác'),
        ('inactive', 'Ng·ª´ng l√†m vi·ªác')
    ], string='Tr·∫°ng th√°i', default='draft', tracking=True)
    
    # Quan h·ªá h·ª£p ƒë·ªìng v√† l∆∞∆°ng
    contract_ids = fields.One2many('employee.management.contract', 'employee_id', string='H·ª£p ƒë·ªìng')
    current_contract_id = fields.Many2one('employee.management.contract', string='H·ª£p ƒë·ªìng hi·ªán t·∫°i', 
                                         compute='_compute_current_contract', store=True)
    
    # THAY ƒê·ªîI: current_salary l·∫•y t·ª´ phi·∫øu l∆∞∆°ng g·∫ßn nh·∫•t
    current_salary = fields.Float('L∆∞∆°ng hi·ªán t·∫°i', compute='_compute_current_salary', store=True,
                                   help="L∆∞∆°ng th·ª±c nh·∫≠n t·ª´ phi·∫øu l∆∞∆°ng g·∫ßn nh·∫•t")
    
    payslip_ids = fields.One2many('payroll.payslip', 'employee_id', string='Phi·∫øu l∆∞∆°ng')
    latest_payslip_id = fields.Many2one('payroll.payslip', string='Phi·∫øu l∆∞∆°ng g·∫ßn nh·∫•t',
                                        compute='_compute_latest_payslip', store=True)
    
    _sql_constraints = [
        ('identification_number_unique', 'unique(identification_number)', 'S·ªë CMND/CCCD ph·∫£i l√† duy nh·∫•t!'),
    ]
    
    def _generate_random_password(self, length=10):
        """T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n"""
        characters = string.ascii_letters + string.digits + "!@#$%"
        password = ''.join(random.choice(characters) for i in range(length))
        return password
    
    @api.constrains('identification_number')
    def _check_identification_unique(self):
        for record in self:
            if record.identification_number:
                other_employee = self.search([
                    ('identification_number', '=', record.identification_number),
                    ('id', '!=', record.id)
                ])
                if other_employee:
                    raise ValidationError(
                        f"S·ªë CMND/CCCD '{record.identification_number}' ƒë√£ ƒë∆∞·ª£c s·ª≠ d·ª•ng cho nh√¢n vi√™n '{other_employee.display_name_char}'!"
                    )
    
    @api.constrains('create_odoo_account', 'email')
    def _check_email_when_account_created(self):
        """N·∫øu t·∫°o t√†i kho·∫£n Odoo, email l√† b·∫Øt bu·ªôc"""
        for record in self:
            if record.create_odoo_account and not record.email:
                raise ValidationError(
                    "Email l√† b·∫Øt bu·ªôc khi t·∫°o t√†i kho·∫£n Odoo!"
                )
    
    @api.model
    def create(self, vals):
        # Ch·ªâ t·∫°o User n·∫øu checkbox create_odoo_account ƒë∆∞·ª£c t√≠ch
        if vals.get('create_odoo_account') and vals.get('email') and not vals.get('name'):
            # T·∫°o login t·ª´ email
            login_name = vals['email'].split('@')[0].lower()
            employee_name = vals.get('display_name_char', 'Nh√¢n vi√™n m·ªõi')
            
            # T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
            random_password = self._generate_random_password()
            vals['current_password'] = random_password
            
            # X√°c ƒë·ªãnh quy·ªÅn
            role = vals.get('user_role', 'employee')
            if role == 'manager':
                groups = [
                    self.env.ref('base.group_user').id,
                    self.env.ref('employee_management.group_manager').id,
                    self.env.ref('employee_management.group_payroll_manager').id
                ]
            elif role == 'officer':
                groups = [
                    self.env.ref('base.group_user').id,
                    self.env.ref('employee_management.group_employee').id,
                    self.env.ref('employee_management.group_payroll_officer').id
                ]
            else:
                groups = [
                    self.env.ref('base.group_user').id,
                    self.env.ref('employee_management.group_employee').id,
                    self.env.ref('employee_management.group_payroll_employee').id
                ]
            
            # T·∫°o User m·ªõi
            new_user = self.env['res.users'].sudo().create({
                'name': employee_name,
                'login': login_name,
                'email': vals['email'],
                'password': random_password,
                'groups_id': [(6, 0, groups)],
            })
            
            vals['name'] = new_user.id
        
        employee = super().create(vals)
        
        # G·ª≠i th√¥ng b√°o v·ªõi m·∫≠t kh·∫©u
        if employee.create_odoo_account and employee.current_password:
            employee.message_post(
                body=f"""
                <div style='background-color: #e8f5e9; padding: 15px; border-radius: 5px; border-left: 4px solid #4caf50;'>
                    <h3 style='color: #2e7d32; margin-top: 0;'>üîë T√†i kho·∫£n Odoo ƒë√£ ƒë∆∞·ª£c t·∫°o</h3>
                    <p><strong>T√™n ƒëƒÉng nh·∫≠p:</strong> {employee.name.login}</p>
                    <p><strong>Email:</strong> {employee.email}</p>
                    <p><strong>M·∫≠t kh·∫©u:</strong> <code style='background: #fff; padding: 4px 8px; border-radius: 3px; font-size: 14px;'>{employee.current_password}</code></p>
                    <p style='color: #d32f2f; margin-bottom: 0;'><em>‚ö†Ô∏è Vui l√≤ng l∆∞u l·∫°i m·∫≠t kh·∫©u n√†y!</em></p>
                </div>
                """,
                subject="Th√¥ng tin t√†i kho·∫£n m·ªõi"
            )
        
        return employee

    def write(self, vals):
        # Khi thay ƒë·ªïi create_odoo_account t·ª´ False th√†nh True
        if 'create_odoo_account' in vals and vals['create_odoo_account'] and not self.name:
            if not self.email:
                raise ValidationError("Email l√† b·∫Øt bu·ªôc khi t·∫°o t√†i kho·∫£n Odoo!")
            
            for record in self:
                # T·∫°o login t·ª´ email
                login_name = record.email.split('@')[0].lower()
                employee_name = record.display_name_char or 'Nh√¢n vi√™n'
                
                # T·∫°o m·∫≠t kh·∫©u ng·∫´u nhi√™n
                random_password = self._generate_random_password()
                vals['current_password'] = random_password
                
                # X√°c ƒë·ªãnh quy·ªÅn
                role = vals.get('user_role', record.user_role)
                if role == 'manager':
                    groups = [
                        self.env.ref('base.group_user').id,
                        self.env.ref('employee_management.group_manager').id,
                        self.env.ref('employee_management.group_payroll_manager').id
                    ]
                elif role == 'officer':
                    groups = [
                        self.env.ref('base.group_user').id,
                        self.env.ref('employee_management.group_employee').id,
                        self.env.ref('employee_management.group_payroll_officer').id
                    ]
                else:
                    groups = [
                        self.env.ref('base.group_user').id,
                        self.env.ref('employee_management.group_employee').id,
                        self.env.ref('employee_management.group_payroll_employee').id
                    ]
                
                # T·∫°o User m·ªõi
                new_user = self.env['res.users'].sudo().create({
                    'name': employee_name,
                    'login': login_name,
                    'email': record.email,
                    'password': random_password,
                    'groups_id': [(6, 0, groups)],
                })
                
                vals['name'] = new_user.id
                
                # G·ª≠i th√¥ng b√°o
                record.message_post(
                    body=f"""
                    <div style='background-color: #e8f5e9; padding: 15px; border-radius: 5px; border-left: 4px solid #4caf50;'>
                        <h3 style='color: #2e7d32; margin-top: 0;'>üîë T√†i kho·∫£n Odoo ƒë√£ ƒë∆∞·ª£c t·∫°o</h3>
                        <p><strong>T√™n ƒëƒÉng nh·∫≠p:</strong> {new_user.login}</p>
                        <p><strong>Email:</strong> {record.email}</p>
                        <p><strong>M·∫≠t kh·∫©u:</strong> <code style='background: #fff; padding: 4px 8px; border-radius: 3px; font-size: 14px;'>{random_password}</code></p>
                        <p style='color: #d32f2f; margin-bottom: 0;'><em>‚ö†Ô∏è Vui l√≤ng l∆∞u l·∫°i m·∫≠t kh·∫©u n√†y!</em></p>
                    </div>
                    """,
                    subject="Th√¥ng tin t√†i kho·∫£n m·ªõi"
                )
        
        # Khi thay ƒë·ªïi quy·ªÅn, c·∫≠p nh·∫≠t groups c·ªßa User
        if 'user_role' in vals and self.name:
            for record in self:
                if record.name:
                    if vals['user_role'] == 'manager':
                        groups = [
                            self.env.ref('base.group_user').id,
                            self.env.ref('employee_management.group_manager').id,
                            self.env.ref('employee_management.group_payroll_manager').id
                        ]
                    elif vals['user_role'] == 'officer':
                        groups = [
                            self.env.ref('base.group_user').id,
                            self.env.ref('employee_management.group_employee').id,
                            self.env.ref('employee_management.group_payroll_officer').id
                        ]
                    else:
                        groups = [
                            self.env.ref('base.group_user').id,
                            self.env.ref('employee_management.group_employee').id,
                            self.env.ref('employee_management.group_payroll_employee').id
                        ]
                    
                    record.name.sudo().write({
                        'groups_id': [(6, 0, groups)]
                    })
        
        # Khi thay ƒë·ªïi t√™n ho·∫∑c email, c·∫≠p nh·∫≠t User
        if ('display_name_char' in vals or 'email' in vals) and self.name:
            for record in self:
                user_vals = {}
                if 'display_name_char' in vals:
                    user_vals['name'] = vals['display_name_char']
                if 'email' in vals:
                    user_vals['email'] = vals['email']
                
                if user_vals:
                    record.name.sudo().write(user_vals)
        
        return super().write(vals)

    @api.depends('contract_ids.state', 'contract_ids.date_start', 'contract_ids.date_end')
    def _compute_current_contract(self):
        for employee in self:
            current_contract = employee.contract_ids.filtered(
                lambda c: c.state == 'open' and 
                          c.date_start <= fields.Date.today() and
                          (not c.date_end or c.date_end >= fields.Date.today())
            )
            employee.current_contract_id = current_contract[:1] if current_contract else False
    
    @api.depends('payslip_ids.state', 'payslip_ids.date_to')
    def _compute_latest_payslip(self):
        """T√¨m phi·∫øu l∆∞∆°ng g·∫ßn nh·∫•t ƒë√£ ho√†n th√†nh"""
        for employee in self:
            latest = employee.payslip_ids.filtered(
                lambda p: p.state == 'done'
            ).sorted('date_to', reverse=True)
            employee.latest_payslip_id = latest[:1] if latest else False
    
    @api.depends('latest_payslip_id.net_wage')
    def _compute_current_salary(self):
        """L∆∞∆°ng hi·ªán t·∫°i = L∆∞∆°ng th·ª±c nh·∫≠n t·ª´ phi·∫øu l∆∞∆°ng g·∫ßn nh·∫•t"""
        for employee in self:
            employee.current_salary = employee.latest_payslip_id.net_wage if employee.latest_payslip_id else 0.0

    def action_activate(self):
        self.write({'state': 'active'})
    
    def action_deactivate(self):
        self.write({'state': 'inactive'})
    
    def name_get(self):
        result = []
        for record in self:
            name = f"{record.display_name_char}"
            result.append((record.id, name))
        return result
    
    def action_reset_password(self):
        """ƒê·ªïi m·∫≠t kh·∫©u cho nh√¢n vi√™n"""
        self.ensure_one()
        if not self.name:
            raise UserError("Nh√¢n vi√™n n√†y ch∆∞a c√≥ t√†i kho·∫£n li√™n k·∫øt!")
        
        return {
            'type': 'ir.actions.act_window',
            'name': 'ƒê·ªïi M·∫≠t kh·∫©u',
            'res_model': 'employee.reset.password.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {
                'default_employee_id': self.id,
                'default_user_id': self.name.id,
                'default_current_password_display': self.current_password,
            }
        }


class EmployeeResetPasswordWizard(models.TransientModel):
    _name = 'employee.reset.password.wizard'
    _description = 'Wizard ƒê·ªïi M·∫≠t kh·∫©u'

    employee_id = fields.Many2one('employee.management.employee', string='Nh√¢n vi√™n', required=True, readonly=True)
    user_id = fields.Many2one('res.users', string='T√†i kho·∫£n', required=True, readonly=True)
    
    # Hi·ªÉn th·ªã m·∫≠t kh·∫©u hi·ªán t·∫°i
    current_password_display = fields.Char(
        'M·∫≠t kh·∫©u hi·ªán t·∫°i', 
        readonly=True,
        help="M·∫≠t kh·∫©u ƒëang ƒë∆∞·ª£c s·ª≠ d·ª•ng"
    )
    
    new_password = fields.Char('M·∫≠t kh·∫©u m·ªõi', required=True)
    confirm_password = fields.Char('X√°c nh·∫≠n m·∫≠t kh·∫©u m·ªõi', required=True)

    @api.constrains('new_password', 'confirm_password')
    def _check_password_match(self):
        for wizard in self:
            if wizard.new_password != wizard.confirm_password:
                raise ValidationError("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")

    def action_confirm_reset(self):
        self.ensure_one()
        
        if self.new_password != self.confirm_password:
            raise UserError("M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp!")
        
        # ƒê·ªïi m·∫≠t kh·∫©u
        self.user_id.sudo().write({
            'password': self.new_password
        })
        
        # C·∫≠p nh·∫≠t m·∫≠t kh·∫©u hi·ªán t·∫°i v√†o employee
        self.employee_id.sudo().write({
            'current_password': self.new_password
        })
        
        # G·ª≠i th√¥ng b√°o v√†o chatter
        self.employee_id.message_post(
            body=f"""
            <div style='background-color: #fff3e0; padding: 15px; border-radius: 5px; border-left: 4px solid #ff9800;'>
                <h3 style='color: #e65100; margin-top: 0;'>üîÑ M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi</h3>
                <p><strong>T√†i kho·∫£n:</strong> {self.user_id.login}</p>
                <p><strong>Email:</strong> {self.user_id.email}</p>
                <p><strong>M·∫≠t kh·∫©u m·ªõi:</strong> <code style='background: #fff; padding: 4px 8px; border-radius: 3px; font-size: 14px;'>{self.new_password}</code></p>
                <p style='color: #d32f2f; margin-bottom: 0;'><em>‚ö†Ô∏è Vui l√≤ng th√¥ng b√°o cho nh√¢n vi√™n!</em></p>
            </div>
            """,
            subject="M·∫≠t kh·∫©u ƒë√£ ƒë∆∞·ª£c thay ƒë·ªïi"
        )
        
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': 'Th√†nh c√¥ng!',
                'message': f'ƒê√£ ƒë·ªïi m·∫≠t kh·∫©u cho {self.employee_id.display_name_char}. M·∫≠t kh·∫©u m·ªõi: {self.new_password}',
                'type': 'success',
                'sticky': True,
            }
        }