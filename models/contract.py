# -*- coding: utf-8 -*-
from odoo import models, fields, api, _
from datetime import date, timedelta
from odoo.exceptions import UserError, ValidationError

class EmployeeContract(models.Model):
    _name = 'employee.management.contract'
    _description = 'H·ª£p ƒë·ªìng Lao ƒë·ªông'
    _inherit = ['mail.thread']
    _rec_name = 'name'
    _order = 'date_start desc'

    name = fields.Char('Tham chi·∫øu H·ª£p ƒë·ªìng', compute='_compute_contract_name', store=True, tracking=True)

    # Th√¥ng tin nh√¢n vi√™n
    employee_id = fields.Many2one('employee.management.employee', string='Ng∆∞·ªùi lao ƒë·ªông',
                                required=True, tracking=True, ondelete='cascade')
    department = fields.Char('Ph√≤ng ban', related='employee_id.department', readonly=True)
    position = fields.Char('Ch·ª©c v·ª•', related='employee_id.position', readonly=True)

    # Th√™m fields c√≤n thi·∫øu t·ª´ view
    analytic_account_id = fields.Many2one('account.analytic.account', string='Analytic Account')
    working_hours = fields.Float('Gi·ªù l√†m vi·ªác', default=8.0)
    color = fields.Integer('Color Index', default=0)

    # Th√¥ng tin h·ªßy h·ª£p ƒë·ªìng
    cancel_date = fields.Date('Ng√†y h·ªßy')
    cancel_reason = fields.Text('L√Ω do h·ªßy')

    # Chi ti·∫øt h·ª£p ƒë·ªìng
    date_start = fields.Date('Ng√†y b·∫Øt ƒë·∫ßu', required=True, tracking=True, default=fields.Date.today)
    date_end = fields.Date('Ng√†y k·∫øt th√∫c', tracking=True)
    trial_date_end = fields.Date('Ng√†y k·∫øt th√∫c th·ª≠ vi·ªác', tracking=True)

    # Th√¥ng tin l∆∞∆°ng - TH√äM VALIDATION
    base_wage = fields.Float('L∆∞∆°ng c∆° b·∫£n', required=True, default=0.0, tracking=True)
    benefit_ids = fields.One2many('employee.management.contract.benefit', 'contract_id', string='Ph√∫c l·ª£i')
    contribution_ids = fields.One2many('employee.management.contract.contribution', 'contract_id', string='C√°c kho·∫£n ƒë√≥ng g√≥p')
    salary_mode = fields.Selection([
        ('staff', 'L∆∞∆°ng nh√¢n vi√™n'),
        ('hr', 'L∆∞∆°ng HR'),
        ('director', 'L∆∞∆°ng gi√°m ƒë·ªëc'),
    ], string='Ch·∫ø ƒë·ªô l∆∞∆°ng', required=True)

    # T√≠nh to√°n l∆∞∆°ng
    total_benefit = fields.Float('T·ªïng ph√∫c l·ª£i', compute='_compute_total_benefit', store=True)
    total_contribution = fields.Float('T·ªïng ƒë√≥ng g√≥p', compute='_compute_total_contribution', store=True)
    total_salary = fields.Float('T·ªïng l∆∞∆°ng', compute='_compute_total_salary', store=True)

    # Tr·∫°ng th√°i
    state = fields.Selection([
        ('draft', 'Nh√°p'),
        ('open', 'ƒêang l√†m vi·ªác'),
        ('expired', 'H·∫øt h·∫°n'),
        ('cancel', 'ƒê√£ h·ªßy')
    ], string='Tr·∫°ng th√°i', default='draft', tracking=True)

    # Currency field cho monetary widget
    currency_id = fields.Many2one('res.currency', string='Currency', 
                                 default=lambda self: self.env.company.currency_id)

    # Th√™m field ƒë·ªÉ theo d√µi vi·ªác c·∫£nh b√°o h·∫øt h·∫°n
    expiry_warning_sent = fields.Boolean('ƒê√£ g·ª≠i c·∫£nh b√°o h·∫øt h·∫°n', default=False)
    working_hour_template_id = fields.Many2one(
        'employee.management.working.hour.template',
        string='M·∫´u gi·ªù l√†m vi·ªác',
        required=False
    )

    tax_policy = fields.Selection([
        ('none', 'Kh√¥ng √°p d·ª•ng'),
        ('tncn_bac_thue', 'TNCN theo b·∫≠c thu·∫ø'),
        ('khac', 'Kh√°c')
    ], string='Ch√≠nh s√°ch thu·∫ø TNCN', required=True, default='none')

    # ========================================
    # COMPUTE METHOD CHO NAME
    # ========================================
    @api.depends('employee_id', 'employee_id.display_name_char')
    def _compute_contract_name(self):
        """T√≠nh to√°n t√™n h·ª£p ƒë·ªìng t·ª± ƒë·ªông"""
        for contract in self:
            if contract.employee_id:
                employee_name = contract.employee_id.display_name_char or 'Nh√¢n vi√™n'
                # ƒê·∫øm s·ªë h·ª£p ƒë·ªìng c·ªßa nh√¢n vi√™n n√†y
                contract_count = self.search_count([
                    ('employee_id', '=', contract.employee_id.id),
                    ('id', '<=', contract.id)
                ])
                contract.name = f"H·ª£p ƒë·ªìng c·ªßa {employee_name} l·∫ßn {contract_count}"
            else:
                contract.name = "H·ª£p ƒë·ªìng m·ªõi"

    # ========================================
    # VALIDATION - KI·ªÇM TRA L∆Ø∆†NG C∆† B·∫¢N
    # ========================================
    @api.constrains('base_wage')
    def _check_base_wage(self):
        """Ki·ªÉm tra l∆∞∆°ng c∆° b·∫£n ph·∫£i > 0"""
        for contract in self:
            if contract.base_wage is None:
                raise ValidationError('L∆∞∆°ng c∆° b·∫£n kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng!')
            if contract.base_wage <= 0:
                raise ValidationError(
                    f'L∆∞∆°ng c∆° b·∫£n ph·∫£i l·ªõn h∆°n 0!\n'
                    f'Gi√° tr·ªã hi·ªán t·∫°i: {contract.base_wage:,.0f} VNƒê'
                )
    
    @api.onchange('base_wage')
    def _onchange_base_wage(self):
        """C·∫£nh b√°o khi l∆∞∆°ng c∆° b·∫£n qu√° th·∫•p"""
        if self.base_wage and self.base_wage < 4960000:  # L∆∞∆°ng t·ªëi thi·ªÉu v√πng 1 nƒÉm 2024
            return {
                'warning': {
                    'title': 'C·∫£nh b√°o',
                    'message': f'L∆∞∆°ng c∆° b·∫£n ({self.base_wage:,.0f} VNƒê) th·∫•p h∆°n l∆∞∆°ng t·ªëi thi·ªÉu v√πng 1 (4,960,000 VNƒê).\n'
                              f'Vui l√≤ng ki·ªÉm tra l·∫°i!'
                }
            }

    @api.depends('benefit_ids.amount')
    def _compute_total_benefit(self):
        for contract in self:
            contract.total_benefit = sum(contract.benefit_ids.mapped('amount'))

    @api.depends('contribution_ids')
    def _compute_total_contribution(self):
        """T·ªïng ƒë√≥ng g√≥p = S·ªë l∆∞·ª£ng ki·ªÉu ƒë√≥ng g√≥p (kh√¥ng c√≥ s·ªë ti·ªÅn)"""
        for contract in self:
            contract.total_contribution = len(contract.contribution_ids)

    @api.depends('base_wage', 'total_benefit', 'total_contribution')
    def _compute_total_salary(self):
        for contract in self:
            # Kh√¥ng tr·ª´ contribution v√¨ kh√¥ng c√≥ s·ªë ti·ªÅn
            contract.total_salary = contract.base_wage + contract.total_benefit

    @api.model
    def create(self, vals):
        # T·∫°o t√™n t·ª± ƒë·ªông s·∫Ω do compute x·ª≠ l√Ω
        return super().create(vals)
    
    def write(self, vals):
        # ƒê·∫£m b·∫£o logic n√†y ho·∫°t ƒë·ªông tr√™n t·∫•t c·∫£ c√°c b·∫£n ghi ƒëang ƒë∆∞·ª£c ghi
        if 'date_end' in vals:
            # Khi ng√†y k·∫øt th√∫c b·ªã thay ƒë·ªïi, reset c·ªù c·∫£nh b√°o h·∫øt h·∫°n
            vals['expiry_warning_sent'] = False

        return super().write(vals)

    def action_start_contract(self):
        for contract in self:
            if contract.state == 'draft':
                contract.state = 'open'
                contract.message_post(body=_("H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c kh·ªüi ƒë·ªông v√† chuy·ªÉn sang tr·∫°ng th√°i 'ƒêang l√†m vi·ªác'."))
        return True

    def action_renew_contract(self):
        self.ensure_one()
        return {
            'name': 'Gia h·∫°n H·ª£p ƒë·ªìng',
            'type': 'ir.actions.act_window',
            'res_model': 'employee.contract.renew.wizard',
            'view_mode': 'form',
            'target': 'new',
            'context': {
                'default_contract_id': self.id,
                'default_current_end_date': self.date_end,
                'default_new_end_date': self.date_end + timedelta(days=365) if self.date_end else fields.Date.today() + timedelta(days=365)
            }
        }

    def action_close_contract(self):
        for contract in self:
            contract.state = 'close'

    def action_cancel_contract(self):
        for contract in self:
            if contract.state not in ['close', 'cancel']:
                return {
                    'name': 'H·ªßy H·ª£p ƒë·ªìng',
                    'type': 'ir.actions.act_window',
                    'res_model': 'employee.contract.cancel.wizard',
                    'view_mode': 'form',
                    'target': 'new',
                    'context': {'default_contract_id': contract.id}
                }
        return True

    def action_set_draft(self):
        for contract in self:
            contract.state = 'draft'

    @api.model
    def _cron_check_contract_expiry(self):
        today = fields.Date.today()
        
        expired_contracts = self.search([
            ('state', '=', 'open'),
            ('date_end', '!=', False),
            ('date_end', '<', today)
        ])
        
        if expired_contracts:
            expired_contracts.write({'state': 'expired'})
            
            for contract in expired_contracts:
                contract.message_post(
                    body=f"üö® <b>H·ª£p ƒë·ªìng ƒë√£ h·∫øt h·∫°n!</b><br/>"
                         f"H·ª£p ƒë·ªìng ƒë√£ t·ª± ƒë·ªông chuy·ªÉn sang tr·∫°ng th√°i 'H·∫øt h·∫°n' v√†o ng√†y {today.strftime('%d/%m/%Y')}.<br/>"
                         f"Vui l√≤ng li√™n h·ªá b·ªô ph·∫≠n HR ƒë·ªÉ gia h·∫°n ho·∫∑c x·ª≠ l√Ω."
                )
        
        warning_date = today + timedelta(days=7)
        soon_expired_contracts = self.search([
            ('state', '=', 'open'),
            ('date_end', '!=', False),
            ('date_end', '<=', warning_date),
            ('date_end', '>=', today),
            ('expiry_warning_sent', '=', False)
        ])
        
        if soon_expired_contracts:
            for contract in soon_expired_contracts:
                days_left = (contract.date_end - today).days
                contract.message_post(
                    body=f"üö® <b>C·∫£nh b√°o h·ª£p ƒë·ªìng s·∫Øp h·∫øt h·∫°n!</b><br/>"
                         f"H·ª£p ƒë·ªìng s·∫Ω h·∫øt h·∫°n v√†o ng√†y {contract.date_end.strftime('%d/%m/%Y')} "
                         f"(c√≤n {days_left} ng√†y).<br/>"
                         f"Vui l√≤ng chu·∫©n b·ªã gia h·∫°n ho·∫∑c x·ª≠ l√Ω k·ªãp th·ªùi."
                )
                contract.expiry_warning_sent = True
        
        return True

    @api.onchange('date_end')
    def _onchange_date_end(self):
        today = fields.Date.context_today(self)
        for contract in self:
            if contract.date_end:
                if contract.date_end < today:
                    contract.state = 'expired'
                else:
                    contract.state = 'open'

    def action_update_contract_names(self):
        """C·∫≠p nh·∫≠t l·∫°i tr∆∞·ªùng 'name' cho t·∫•t c·∫£ h·ª£p ƒë·ªìng d·ª±a tr√™n t√™n nh√¢n vi√™n m·ªõi."""
        for contract in self:
            contract._compute_contract_name()
        return {
            'type': 'ir.actions.client',
            'tag': 'display_notification',
            'params': {
                'title': 'C·∫≠p nh·∫≠t th√†nh c√¥ng',
                'message': f'ƒê√£ c·∫≠p nh·∫≠t t√™n tham chi·∫øu cho {len(self)} h·ª£p ƒë·ªìng.',
                'type': 'success',
                'sticky': False,
            }
        }


class ContractBenefit(models.Model):
    _name = 'employee.management.contract.benefit'
    _description = 'Ph√∫c l·ª£i H·ª£p ƒë·ªìng'

    contract_id = fields.Many2one('employee.management.contract', string='H·ª£p ƒë·ªìng', ondelete='cascade')
    name = fields.Char('Lo·∫°i ph√∫c l·ª£i', required=True)
    benefit_type = fields.Selection([
        ('allowance', 'Ph·ª• c·∫•p'),
        ('bonus', 'Th∆∞·ªüng'),
        ('insurance', 'B·∫£o hi·ªÉm'),
        ('other', 'Kh√°c')
    ], string='Lo·∫°i', default='allowance')
    amount = fields.Float('S·ªë ti·ªÅn', required=True, default=0.0)
    currency_id = fields.Many2one('res.currency', related='contract_id.currency_id', store=True)

    @api.constrains('amount')
    def _check_amount(self):
        """Ki·ªÉm tra s·ªë ti·ªÅn ph√∫c l·ª£i >= 0"""
        for benefit in self:
            if benefit.amount < 0:
                raise ValidationError(f'S·ªë ti·ªÅn ph√∫c l·ª£i kh√¥ng th·ªÉ √¢m!\nGi√° tr·ªã: {benefit.amount:,.0f} VNƒê')


class ContractContribution(models.Model):
    _name = 'employee.management.contract.contribution'
    _description = 'ƒê√≥ng g√≥p h·ª£p ƒë·ªìng'

    contract_id = fields.Many2one('employee.management.contract', string='H·ª£p ƒë·ªìng', ondelete='cascade')
    contribution_type_id = fields.Many2one(
        'employee.management.contribution.type', 
        string='Ki·ªÉu ƒë√≥ng g√≥p', 
        required=True
    )
    name = fields.Char(string='T√™n', related='contribution_type_id.name', store=True, readonly=True)


class ContributionType(models.Model):
    """Model ƒë·ªÉ qu·∫£n l√Ω c√°c ki·ªÉu ƒë√≥ng g√≥p"""
    _name = 'employee.management.contribution.type'
    _description = 'Ki·ªÉu ƒê√≥ng g√≥p'
    _order = 'sequence, name'

    name = fields.Char('T√™n ki·ªÉu ƒë√≥ng g√≥p', required=True)
    code = fields.Char('M√£', required=True)
    description = fields.Text('M√¥ t·∫£')
    sequence = fields.Integer('Th·ª© t·ª±', default=10)
    active = fields.Boolean('Ho·∫°t ƒë·ªông', default=True)

    _sql_constraints = [
        ('code_unique', 'unique(code)', 'M√£ ki·ªÉu ƒë√≥ng g√≥p ph·∫£i l√† duy nh·∫•t!')
    ]


class WorkingHourTemplate(models.Model):
    _name = 'employee.management.working.hour.template'
    _description = 'M·∫´u gi·ªù l√†m vi·ªác'

    name = fields.Char('T√™n m·∫´u', required=True)
    hours_per_week = fields.Float('S·ªë gi·ªù/tu·∫ßn', required=True)


class TaxPolicy(models.Model):
    _name = 'employee.management.tax.policy'
    _description = 'Ch√≠nh s√°ch thu·∫ø'

    name = fields.Char('T√™n ch√≠nh s√°ch', required=True)
    description = fields.Text('M√¥ t·∫£')
    rule_ids = fields.One2many('employee.management.tax.policy.rule', 'tax_policy_id', string='Quy t·∫Øc b·∫≠c thu·∫ø')


class TaxPolicyRule(models.Model):
    _name = 'employee.management.tax.policy.rule'
    _description = 'Quy t·∫Øc b·∫≠c thu·∫ø'

    tax_policy_id = fields.Many2one('employee.management.tax.policy', string='Ch√≠nh s√°ch thu·∫ø', required=True, ondelete='cascade')
    min_income = fields.Float('Thu nh·∫≠p t·ªëi thi·ªÉu', required=True)
    max_income = fields.Float('Thu nh·∫≠p t·ªëi ƒëa')
    tax_rate = fields.Float('Thu·∫ø su·∫•t (%)', required=True)


class EmployeeContractCancelWizard(models.TransientModel):
    _name = 'employee.contract.cancel.wizard'
    _description = 'Wizard H·ªßy h·ª£p ƒë·ªìng'

    contract_id = fields.Many2one('employee.management.contract', string='H·ª£p ƒë·ªìng', required=True)
    reason = fields.Char('L√Ω do h·ªßy h·ª£p ƒë·ªìng', required=True)

    def action_confirm_cancel(self):
        self.ensure_one()
        if self.contract_id:
            self.contract_id.state = 'cancel'
            self.contract_id.cancel_reason = self.reason
            self.contract_id.cancel_date = fields.Date.context_today(self)
            
            # Log v√†o chatter
            self.contract_id.message_post(
                body=f"‚ùå H·ª£p ƒë·ªìng ƒë√£ b·ªã h·ªßy<br/>"
                     f"Ng√†y h·ªßy: {self.contract_id.cancel_date.strftime('%d/%m/%Y')}<br/>"
                     f"L√Ω do: {self.reason}"
            )
        return {'type': 'ir.actions.act_window_close'}


class EmployeeContractRenewWizard(models.TransientModel):
    _name = 'employee.contract.renew.wizard'
    _description = 'Wizard Gia h·∫°n h·ª£p ƒë·ªìng'

    contract_id = fields.Many2one('employee.management.contract', string='H·ª£p ƒë·ªìng', required=True)
    current_end_date = fields.Date('Ng√†y k·∫øt th√∫c hi·ªán t·∫°i', related='contract_id.date_end', readonly=True)
    new_end_date = fields.Date('Ng√†y k·∫øt th√∫c m·ªõi', required=True)
    reason = fields.Char('L√Ω do gia h·∫°n h·ª£p ƒë·ªìng')

    def action_confirm_renew(self):
        self.ensure_one()
        if self.contract_id and self.new_end_date:
            old_date = self.contract_id.date_end
            self.contract_id.date_end = self.new_end_date
            self.contract_id.state = 'open'
            self.contract_id.expiry_warning_sent = False  # Reset c·ªù c·∫£nh b√°o
            
            # Ghi log v√†o chatter
            self.contract_id.message_post(
                body=f"üîÑ H·ª£p ƒë·ªìng ƒë√£ ƒë∆∞·ª£c gia h·∫°n<br/>"
                     f"Ng√†y k·∫øt th√∫c c≈©: {old_date.strftime('%d/%m/%Y') if old_date else 'Kh√¥ng c√≥'}<br/>"
                     f"Ng√†y k·∫øt th√∫c m·ªõi: {self.new_end_date.strftime('%d/%m/%Y')}<br/>"
                     f"L√Ω do: {self.reason or 'Kh√¥ng c√≥'}"
            )
        return {'type': 'ir.actions.act_window_close'}